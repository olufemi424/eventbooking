{"ast":null,"code":"var _jsxFileName = \"/Users/olu/Desktop/PROJECTS/GRAPHQL/eventbooking/frontend/src/pages/Events.js\";\nimport React, { Component, Fragment } from \"react\";\nimport Modal from \"../components/modal/Modal\";\nimport Backdrop from \"../components/backdrop/Backdrop\";\nimport AuthContext from \"../context/auth-context\";\nimport EventList from \"../components/Events/EventsList\";\nimport Spinner from \"../components/commons/Spinner\";\nexport class Events extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      events: [],\n      loading: false,\n      selectedEvent: \"\"\n    };\n    this.isActive = true;\n\n    this.startCreatingEventHandler = () => {\n      this.setState({\n        creating: true\n      }); // this.bookEventHandle()\n    };\n\n    this.modalCancelHandler = () => {\n      if (this.isActive) {\n        this.setState({\n          creating: false,\n          selectedEvent: null\n        });\n      }\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const title = this.titleElRef.current.value;\n      const price = +this.priceElRef.current.value;\n      const date = this.dateElRef.current.value;\n      const description = this.descriptionElRef.current.value;\n\n      if (title.trim().length === 0 || price <= 0 || date.trim().length === 0 || description.trim().length === 0) {\n        return;\n      } // const event = { title, price, date, description };\n\n\n      const token = this.context.token;\n      const requestBody = {\n        query: \"\\n          mutation{\\n            createEvent(eventInput: {title: \\\"\".concat(title, \"\\\", price:\").concat(price, \", date:\\\"\").concat(date, \"\\\" description:\\\"\").concat(description, \"\\\"}){\\n              _id\\n              title\\n              description\\n              price\\n            }\\n          }\\n        \")\n      };\n      fetch(\"http://localhost:8000/graphql\", {\n        method: \"POST\",\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"Application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState(prevState => {\n          const updatedEvent = [...prevState.events];\n          updatedEvent.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return {\n            events: updatedEvent\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.fetchEvents = () => {\n      this.setState({\n        loading: true\n      });\n      const requestBody = {\n        query: \"\\n          query{\\n            events{\\n              _id\\n              title\\n              description\\n              price\\n              date\\n              creator{\\n                _id\\n                email\\n              }\\n            }\\n          }\\n        \"\n      };\n      fetch(\"http://localhost:8000/graphql\", {\n        method: \"POST\",\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"Application/json\"\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return res.json();\n      }).then(resData => {\n        const events = resData.data.events;\n\n        if (this.isActive) {\n          this.setState({\n            events,\n            loading: false\n          });\n        }\n      }).catch(err => {\n        console.error(\"Error Fetching Event: \".concat(err.message));\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.showDetailHandler = eventId => {\n      this.setState(prevState => {\n        const selectedEvent = prevState.events.find(e => e._id === eventId);\n        return {\n          selectedEvent: selectedEvent\n        };\n      });\n    };\n\n    this.bookEventHandler = () => {\n      if (!this.context.token) {\n        this.setState({\n          selectedEvent: null\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: \"\\n          mutation{\\n            bookEvent(eventId: \\\"\".concat(this.state.selectedEvent._id, \"\\\"){\\n              _id\\n              createdAt\\n              updatedAt\\n            }\\n          }\\n        \")\n      };\n      const token = this.context.token;\n      fetch(\"http://localhost:8000/graphql\", {\n        method: \"POST\",\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"Application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return res.json();\n      }).then(resData => {\n        if (this.isActive) {\n          this.setState({\n            selectedEvent: null\n          });\n        }\n      }).catch(err => {\n        console.error(\"Error Booking Event: \".concat(err.message));\n      });\n    };\n\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, this.context.token && React.createElement(\"div\", {\n      className: \"events-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Share your own events\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreatingEventHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Create Event\")), (this.state.creating || this.state.selectedEvent) && React.createElement(Backdrop, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), this.state.creating && React.createElement(Modal, {\n      title: \"Add Event\",\n      canCancel: true,\n      canConfirm: true,\n      onConfirm: this.modalConfirmHandler,\n      onCancel: this.modalCancelHandler,\n      buttonText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      ref: this.titleElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Price\"), React.createElement(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      ref: this.priceElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"input\", {\n      type: \"date\",\n      id: \"date\",\n      ref: this.dateElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"textarea\", {\n      id: \"description\",\n      rows: \"4\",\n      ref: this.descriptionElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })))), this.state.selectedEvent && React.createElement(Modal, {\n      title: \"Add Event\",\n      canCancel: true,\n      canConfirm: true,\n      onConfirm: this.bookEventHandler,\n      onCancel: this.modalCancelHandler,\n      buttonText: this.context.token ? \"Book Event\" : \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \" \", this.state.selectedEvent.title), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"$ \", this.state.selectedEvent.price, \" -\", \" \", this.state.selectedEvent.date, \" \")), this.state.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }) : React.createElement(EventList, {\n      events: this.state.events,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }));\n  }\n\n}\nEvents.contextType = AuthContext;\nexport default Events;","map":{"version":3,"sources":["/Users/olu/Desktop/PROJECTS/GRAPHQL/eventbooking/frontend/src/pages/Events.js"],"names":["React","Component","Fragment","Modal","Backdrop","AuthContext","EventList","Spinner","Events","constructor","props","state","creating","events","loading","selectedEvent","isActive","startCreatingEventHandler","setState","modalCancelHandler","modalConfirmHandler","title","titleElRef","current","value","price","priceElRef","date","dateElRef","description","descriptionElRef","trim","length","token","context","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedEvent","push","_id","data","createEvent","creator","userId","catch","err","console","log","fetchEvents","error","message","showDetailHandler","eventId","find","e","bookEventHandler","createRef","componentDidMount","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Modal from \"../components/modal/Modal\";\nimport Backdrop from \"../components/backdrop/Backdrop\";\nimport AuthContext from \"../context/auth-context\";\nimport EventList from \"../components/Events/EventsList\";\nimport Spinner from \"../components/commons/Spinner\";\n\nexport class Events extends Component {\n  state = {\n    creating: false,\n    events: [],\n    loading: false,\n    selectedEvent: \"\"\n  };\n  isActive = true;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreatingEventHandler = () => {\n    this.setState({ creating: true });\n    // this.bookEventHandle()\n  };\n\n  modalCancelHandler = () => {\n    if (this.isActive) {\n      this.setState({ creating: false, selectedEvent: null });\n    }\n  };\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n    // const event = { title, price, date, description };\n\n    const token = this.context.token;\n\n    const requestBody = {\n      query: `\n          mutation{\n            createEvent(eventInput: {title: \"${title}\", price:${price}, date:\"${date}\" description:\"${description}\"}){\n              _id\n              title\n              description\n              price\n            }\n          }\n        `\n    };\n\n    fetch(\"http://localhost:8000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers: {\n        \"Content-Type\": \"Application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvent = [...prevState.events];\n          updatedEvent.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvent };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  fetchEvents = () => {\n    this.setState({ loading: true });\n    const requestBody = {\n      query: `\n          query{\n            events{\n              _id\n              title\n              description\n              price\n              date\n              creator{\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch(\"http://localhost:8000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers: {\n        \"Content-Type\": \"Application/json\"\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const { events } = resData.data;\n        if (this.isActive) {\n          this.setState({ events, loading: false });\n        }\n      })\n      .catch(err => {\n        console.error(`Error Fetching Event: ${err.message}`);\n        this.setState({ loading: false });\n      });\n  };\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    const requestBody = {\n      query: `\n          mutation{\n            bookEvent(eventId: \"${this.state.selectedEvent._id}\"){\n              _id\n              createdAt\n              updatedAt\n            }\n          }\n        `\n    };\n    const token = this.context.token;\n    fetch(\"http://localhost:8000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers: {\n        \"Content-Type\": \"Application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n        return res.json();\n      })\n      .then(resData => {\n        if (this.isActive) {\n          this.setState({ selectedEvent: null });\n        }\n      })\n      .catch(err => {\n        console.error(`Error Booking Event: ${err.message}`);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own events</p>\n            <button className=\"btn\" onClick={this.startCreatingEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title={\"Add Event\"}\n            canCancel\n            canConfirm\n            onConfirm={this.modalConfirmHandler}\n            onCancel={this.modalCancelHandler}\n            buttonText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"date\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={\"Add Event\"}\n            canCancel\n            canConfirm\n            onConfirm={this.bookEventHandler}\n            onCancel={this.modalCancelHandler}\n            buttonText={this.context.token ? \"Book Event\" : \"Confirm\"}\n          >\n            <h1> {this.state.selectedEvent.title}</h1>\n            <h2>\n              $ {this.state.selectedEvent.price} -{\" \"}\n              {this.state.selectedEvent.date}{\" \"}\n            </h2>\n          </Modal>\n        )}\n        {this.state.loading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Events;\n"]},"metadata":{},"sourceType":"module"}